
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARROW COLON COMMA DIV EQUAL FOR FUNC GT IDENTIFIER IF INT32 LBRACE LOOPD LPAREN LT MINUS MOD MULT NUMBER PLUS RBRACE RETURN RPAREN SEMI SHOW WHILEprogram : declaration_listdeclaration_list : declaration\n                       | declaration declaration_listdeclaration : var_declaration\n                  | function_declarationvar_declaration : type IDENTIFIER COLON expression SEMIfunction_declaration : FUNC IDENTIFIER LPAREN func_args RPAREN ARROW type LBRACE statement_list RBRACEfunc_args : arg_list\n                | emptyarg_list : type IDENTIFIER\n                | type IDENTIFIER COMMA arg_liststatement_list : statement\n                     | statement statement_liststatement : var_declaration\n                | return_statement\n                | expression_statement\n                | show_statement\n                | loopd_statementreturn_statement : RETURN expression SEMIexpression_statement : expression SEMIshow_statement : SHOW LPAREN type RPAREN expression SEMIexpression : term\n                 | expression PLUS term\n                 | expression MINUS termterm : factor\n            | term MULT factor\n            | term DIV factorfactor : NUMBER\n              | IDENTIFIER\n              | LPAREN expression RPAREN\n              | function_callfunction_call : IDENTIFIER LPAREN expression_list RPARENexpression_list : expression\n                      | expression COMMA expression_list\n                      | emptytype : INT32statement : FOR LPAREN var_declaration expression SEMI expression RPAREN LBRACE statement_list RBRACEstatement : WHILE LPAREN expression RPAREN LBRACE statement_list RBRACEloopd_statement : LOOPD LPAREN expression RPAREN LBRACE statement_list RBRACEempty :'
    
_lr_action_items = {'FUNC':([0,3,4,5,26,63,],[7,7,-4,-5,-6,-7,]),'INT32':([0,3,4,5,13,26,42,43,49,51,52,53,54,55,56,63,65,66,69,73,81,83,86,89,90,91,93,],[8,8,-4,-5,8,-6,8,8,8,8,-14,-15,-16,-17,-18,-7,8,-20,8,-19,8,8,-21,-38,-39,8,-37,]),'$end':([1,2,3,4,5,9,26,63,],[0,-1,-2,-4,-5,-3,-6,-7,]),'IDENTIFIER':([6,7,8,12,19,22,25,26,27,28,29,30,45,49,51,52,53,54,55,56,60,66,67,70,71,73,78,80,81,83,86,89,90,91,93,],[10,11,-36,14,14,33,14,-6,14,14,14,14,14,14,14,-14,-15,-16,-17,-18,14,-20,14,14,14,-19,14,14,14,14,-21,-38,-39,14,-37,]),'LBRACE':([8,46,77,79,88,],[-36,49,81,83,91,]),'RPAREN':([8,13,14,16,17,18,20,21,23,24,25,31,33,34,35,36,37,38,39,40,41,44,45,47,48,72,74,75,84,],[-36,-40,-29,-22,-25,-28,-31,32,-8,-9,-40,41,-10,44,-33,-35,-23,-24,-26,-27,-30,-32,-40,-11,-34,77,78,79,88,]),'COLON':([10,],[12,]),'LPAREN':([11,12,14,19,25,26,27,28,29,30,45,49,51,52,53,54,55,56,57,59,60,61,62,66,67,70,71,73,78,80,81,83,86,89,90,91,93,],[13,19,25,19,19,-6,19,19,19,19,19,19,19,-14,-15,-16,-17,-18,65,67,19,69,70,-20,19,19,19,-19,19,19,19,19,-21,-38,-39,19,-37,]),'NUMBER':([12,19,25,26,27,28,29,30,45,49,51,52,53,54,55,56,60,66,67,70,71,73,78,80,81,83,86,89,90,91,93,],[18,18,18,-6,18,18,18,18,18,18,18,-14,-15,-16,-17,-18,18,-20,18,18,18,-19,18,18,18,18,-21,-38,-39,18,-37,]),'MULT':([14,16,17,18,20,37,38,39,40,41,44,],[-29,29,-25,-28,-31,29,29,-26,-27,-30,-32,]),'DIV':([14,16,17,18,20,37,38,39,40,41,44,],[-29,30,-25,-28,-31,30,30,-26,-27,-30,-32,]),'SEMI':([14,15,16,17,18,20,37,38,39,40,41,44,58,68,76,82,],[-29,26,-22,-25,-28,-31,-23,-24,-26,-27,-30,-32,66,73,80,86,]),'PLUS':([14,15,16,17,18,20,31,35,37,38,39,40,41,44,58,68,72,75,76,82,84,],[-29,27,-22,-25,-28,-31,27,27,-23,-24,-26,-27,-30,-32,27,27,27,27,27,27,27,]),'MINUS':([14,15,16,17,18,20,31,35,37,38,39,40,41,44,58,68,72,75,76,82,84,],[-29,28,-22,-25,-28,-31,28,28,-23,-24,-26,-27,-30,-32,28,28,28,28,28,28,28,]),'COMMA':([14,16,17,18,20,33,35,37,38,39,40,41,44,],[-29,-22,-25,-28,-31,43,45,-23,-24,-26,-27,-30,-32,]),'FOR':([26,49,51,52,53,54,55,56,66,73,81,83,86,89,90,91,93,],[-6,57,57,-14,-15,-16,-17,-18,-20,-19,57,57,-21,-38,-39,57,-37,]),'WHILE':([26,49,51,52,53,54,55,56,66,73,81,83,86,89,90,91,93,],[-6,59,59,-14,-15,-16,-17,-18,-20,-19,59,59,-21,-38,-39,59,-37,]),'RETURN':([26,49,51,52,53,54,55,56,66,73,81,83,86,89,90,91,93,],[-6,60,60,-14,-15,-16,-17,-18,-20,-19,60,60,-21,-38,-39,60,-37,]),'SHOW':([26,49,51,52,53,54,55,56,66,73,81,83,86,89,90,91,93,],[-6,61,61,-14,-15,-16,-17,-18,-20,-19,61,61,-21,-38,-39,61,-37,]),'LOOPD':([26,49,51,52,53,54,55,56,66,73,81,83,86,89,90,91,93,],[-6,62,62,-14,-15,-16,-17,-18,-20,-19,62,62,-21,-38,-39,62,-37,]),'RBRACE':([26,50,51,52,53,54,55,56,64,66,73,85,86,87,89,90,92,93,],[-6,63,-12,-14,-15,-16,-17,-18,-13,-20,-19,89,-21,90,-38,-39,93,-37,]),'ARROW':([32,],[42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,3,],[2,9,]),'declaration':([0,3,],[3,3,]),'var_declaration':([0,3,49,51,65,81,83,91,],[4,4,52,52,71,52,52,52,]),'function_declaration':([0,3,],[5,5,]),'type':([0,3,13,42,43,49,51,65,69,81,83,91,],[6,6,22,46,22,6,6,6,74,6,6,6,]),'expression':([12,19,25,45,49,51,60,67,70,71,78,80,81,83,91,],[15,31,35,35,58,58,68,72,75,76,82,84,58,58,58,]),'term':([12,19,25,27,28,45,49,51,60,67,70,71,78,80,81,83,91,],[16,16,16,37,38,16,16,16,16,16,16,16,16,16,16,16,16,]),'factor':([12,19,25,27,28,29,30,45,49,51,60,67,70,71,78,80,81,83,91,],[17,17,17,17,17,39,40,17,17,17,17,17,17,17,17,17,17,17,17,]),'function_call':([12,19,25,27,28,29,30,45,49,51,60,67,70,71,78,80,81,83,91,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'func_args':([13,],[21,]),'arg_list':([13,43,],[23,47,]),'empty':([13,25,45,],[24,36,36,]),'expression_list':([25,45,],[34,48,]),'statement_list':([49,51,81,83,91,],[50,64,85,87,92,]),'statement':([49,51,81,83,91,],[51,51,51,51,51,]),'return_statement':([49,51,81,83,91,],[53,53,53,53,53,]),'expression_statement':([49,51,81,83,91,],[54,54,54,54,54,]),'show_statement':([49,51,81,83,91,],[55,55,55,55,55,]),'loopd_statement':([49,51,81,83,91,],[56,56,56,56,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','ind_compiler.py',72),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','ind_compiler.py',76),
  ('declaration_list -> declaration declaration_list','declaration_list',2,'p_declaration_list','ind_compiler.py',77),
  ('declaration -> var_declaration','declaration',1,'p_declaration','ind_compiler.py',84),
  ('declaration -> function_declaration','declaration',1,'p_declaration','ind_compiler.py',85),
  ('var_declaration -> type IDENTIFIER COLON expression SEMI','var_declaration',5,'p_var_declaration','ind_compiler.py',89),
  ('function_declaration -> FUNC IDENTIFIER LPAREN func_args RPAREN ARROW type LBRACE statement_list RBRACE','function_declaration',10,'p_function_declaration','ind_compiler.py',93),
  ('func_args -> arg_list','func_args',1,'p_func_args','ind_compiler.py',97),
  ('func_args -> empty','func_args',1,'p_func_args','ind_compiler.py',98),
  ('arg_list -> type IDENTIFIER','arg_list',2,'p_arg_list','ind_compiler.py',102),
  ('arg_list -> type IDENTIFIER COMMA arg_list','arg_list',4,'p_arg_list','ind_compiler.py',103),
  ('statement_list -> statement','statement_list',1,'p_statement_list','ind_compiler.py',110),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','ind_compiler.py',111),
  ('statement -> var_declaration','statement',1,'p_statement','ind_compiler.py',118),
  ('statement -> return_statement','statement',1,'p_statement','ind_compiler.py',119),
  ('statement -> expression_statement','statement',1,'p_statement','ind_compiler.py',120),
  ('statement -> show_statement','statement',1,'p_statement','ind_compiler.py',121),
  ('statement -> loopd_statement','statement',1,'p_statement','ind_compiler.py',122),
  ('return_statement -> RETURN expression SEMI','return_statement',3,'p_return_statement','ind_compiler.py',126),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','ind_compiler.py',130),
  ('show_statement -> SHOW LPAREN type RPAREN expression SEMI','show_statement',6,'p_show_statement','ind_compiler.py',134),
  ('expression -> term','expression',1,'p_expression','ind_compiler.py',138),
  ('expression -> expression PLUS term','expression',3,'p_expression','ind_compiler.py',139),
  ('expression -> expression MINUS term','expression',3,'p_expression','ind_compiler.py',140),
  ('term -> factor','term',1,'p_term','ind_compiler.py',147),
  ('term -> term MULT factor','term',3,'p_term','ind_compiler.py',148),
  ('term -> term DIV factor','term',3,'p_term','ind_compiler.py',149),
  ('factor -> NUMBER','factor',1,'p_factor','ind_compiler.py',156),
  ('factor -> IDENTIFIER','factor',1,'p_factor','ind_compiler.py',157),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','ind_compiler.py',158),
  ('factor -> function_call','factor',1,'p_factor','ind_compiler.py',159),
  ('function_call -> IDENTIFIER LPAREN expression_list RPAREN','function_call',4,'p_function_call','ind_compiler.py',171),
  ('expression_list -> expression','expression_list',1,'p_expression_list','ind_compiler.py',175),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','ind_compiler.py',176),
  ('expression_list -> empty','expression_list',1,'p_expression_list','ind_compiler.py',177),
  ('type -> INT32','type',1,'p_type','ind_compiler.py',187),
  ('statement -> FOR LPAREN var_declaration expression SEMI expression RPAREN LBRACE statement_list RBRACE','statement',10,'p_for_loop','ind_compiler.py',191),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','statement',7,'p_while_loop','ind_compiler.py',195),
  ('loopd_statement -> LOOPD LPAREN expression RPAREN LBRACE statement_list RBRACE','loopd_statement',7,'p_loopd_statement','ind_compiler.py',199),
  ('empty -> <empty>','empty',0,'p_empty','ind_compiler.py',204),
]
